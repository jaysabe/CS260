Online lab

Start with the code in ~mike.noel/classes/cs260/students/onlinelabs/lab03. You
will want to copy it into a directory of your own. 

The file supplied.o contains code that can build, display, and destroy a
linear linked list (singly-linked).

For this lab, you will need to write the following two functions in list.cpp,
and add function prototypes for them to list.h. The provided main.cpp has
calls to each of these functions commented out. As you write the functions,
uncomment them from main.cpp.

       void reverse(node * head, node *& newHead)	

       Recursively make a revserse copy of the source list with head where
       newhead is the head of the destination list.

       void removeLast(node *& head)	

       Recursively the last node from this list.

You must use the functions with these exact function prototypes. Use the
supplied makefile for the project to build it. Please don't forget the
supplied.o when generating the executable.

Run your program in valgrind and make sure there are no memory errors or
memory leaks. Assuming the executable file is named app

     valgrind --tool=memcheck --leak-check=full ./app

For lab3 submission, create a tar file containing list.cpp, list.h, and
main.cpp. Use the turnin command to submit it.

     tar cvf lab03_files.tar main.cpp list.cpp list.h
     ~mike.noel/bin/turnin cs260 lab03_files.tar

If you do not turn in ALL of your source files or if I'm unable to compile the
code you submit then you will receive a very low score.

The grading criteria are:

5pts The program compiles
3pts The program runs without crashing or hanging
2pts No memory errors or memory leaks
5pts Correct functionality (2pts for removeLast, 3pts for reverse)
5pts Recursive implementation (2pts for removeLast, 3pts for reverse)

You can get partial credit so be sure to turn in whatever you have by the end
of the lab period.



